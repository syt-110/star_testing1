#### python ####


from flask import Flask, render_template, request, jsonify
import pandas as pd
import numpy as np
import csv
import plotly.graph_objs as go
from astropy.coordinates import SkyCoord
import astropy.units as u

app = Flask(__name__)




#### csv ####

import csv

# 打開 CSV 檔案
with open('PS_2024.10.04_01.33.00.csv', newline='', encoding='utf-8') as csvfile:
    csv_reader = csv.reader(csvfile)
    
    # 定義要提取的欄位位置
    planet_name_index = 0   # 行星名稱在第 0 列
    brightness_index = 11    # 亮度在第 11 列
    ra_index = 39           # 赤經在第 39 列
    declination_index = 41   # 赤緯在第 41 列
    
    # 初始化一個列表來儲存提取的數據
    extracted_data = []
    
    # 跳過表頭
    next(csv_reader)
    
    # 逐行讀取 CSV 並提取所需的數據
    for row in csv_reader:
        # Check if the row has enough elements before accessing them
        if len(row) > brightness_index and len(row) > ra_index and len(row) > declination_index:
            # 提取行星名稱、亮度、赤經、赤緯
            planet_name = row[planet_name_index]
            brightness = row[brightness_index]
            ra = row[ra_index]
            declination = row[declination_index]
            
            # 將提取出的數據存入列表
            extracted_data.append([planet_name, brightness, ra, declination])
        else:
            # If the row is too short, skip it or print a warning
            print(f"Skipping row: {row}") 
            # or you could print: print(f"Warning: Row has insufficient elements: {row}")
            
            
    # 印出提取出的數據
    for data in extracted_data:
        print(f"Planet Name: {data[0]}, Brightness: {data[1]}, RA: {data[2]}, Declination: {data[3]}")

######更正
import csv
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
from datetime import datetime
import pandas as pd
import coord_trans as ct

DEG_TO_RAD = np.pi / 180


data = pd.read_csv('filtered_data.csv')
pl_name_list = data['sy_dist'].tolist()
brightness_index_list = data['sy_gaiamag'].tolist()
ra_index_list = data['ra'].tolist()
dec_index_list = data['dec'].tolist()
sy_dist_list = data['sy_dist'].tolist()

try:
    r, theta, phi = map(float, input("Enter the Astronomical coordinate (r theta phi): ").split())
except ValueError:
    print("Please enter exactly three values for r, theta, and phi.")
    exit(1)  # 退出程式

[search_star_dist, search_star_name] = ct.search_stars(r, theta, phi, sy_dist_list,
                                                     dec_index_list, ra_index_list, pl_name_list)

# list the stars nearby

# select the star

# input the stars name and search the distance
selected_star_name = input("Enter the name of the star you want to select: ")

# 查找對應的 sy_dist 和其他值
if selected_star_name in pl_name_list:
    star_index = pl_name_list.index(selected_star_name)  # 找到星星的索引
    corresponding_sy_dist = sy_dist_list[star_index]
    corresponding_brightness = brightness_index_list[star_index]
    corresponding_ra = ra_index_list[star_index]
    corresponding_dec = dec_index_list[star_index]
    
    x, y, z = ct.spherical_to_cartesian(corresponding_sy_dist, corresponding_dec, corresponding_ra)
    
    # 轉換所有星星的座標
    x_list, y_list, z_list = ct.coord_trans(ct.spherical_to_cartesian(sy_dist_list, dec_index_list, ra_index_list) - (x, y, z))

    # 繪製 3D 圖形
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(x_list, y_list, z_list, s=1)  # 繪製所有星星

    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')
    plt.title('3D Star Plot')
    plt.show()
else:
    print("Star not found in the list.")
######


# 將赤經、赤緯和距離轉換為星座標
ra = df['ra']
dec = df['dec']
distance = df['sy_dist']

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate_star_map', methods=['POST'])
def generate_star_map():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])

    sky_coords = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, distance=distance*u.pc, frame='icrs')

    # 創建 Plotly 圖像
    trace = go.Scattergeo(
        lon=ra,
        lat=dec,
        mode='markers',
        marker=dict(size=4, color='yellow'),
        hoverinfo='text',
        text=df['pl_name']
    )

    layout = go.Layout(
        title=f'Star Sky from ({lat}°, {lon}°)',
        geo=dict(
            projection_type='azimuthal equal area',
            showland=True,
            showcoastlines=False,
            bgcolor="black",
            lataxis=dict(range=[-90, 90]),
            lonaxis=dict(range=[-180, 180])
        )
    )

    fig = go.Figure(data=[trace], layout=layout)
    graphJSON = fig.to_json()

    return jsonify({'graph': graphJSON})

@app.route('/star_info', methods=['POST'])
def star_info():
    # 獲取前端傳遞的索引，並返回對應的星星基本資訊
    star_index = int(request.json['pointIndex'])
    star_data = df.iloc[star_index].to_dict()

    return jsonify(star_data)

if __name__ == '__main__':
    app.run(debug=True)


#### HTML ####

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Star Map</title>
    <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
</head>
<body>
    <h1>Interactive Star Map</h1>

    <label for="lat">Latitude:</label>
    <input type="number" id="lat" name="lat" step="any">
    
    <label for="lon">Longitude:</label>
    <input type="number" id="lon" name="lon" step="any">
    
    <button id="generateBtn">Generate Sky Map</button>

    <div id="star-map"></div>
    <div id="star-info"></div>

    <script src="{{ url_for('static', filename='scripts.js') }}"></script>
</body>
</html>




document.getElementById('generateBtn').addEventListener('click', function() {
    const lat = document.getElementById('lat').value;
    const lon = document.getElementById('lon').value;

    if (!lat || !lon) {
        alert("Please enter both latitude and longitude.");
        return;
    }

    fetch('/generate_star_map', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ lat: lat, lon: lon })
    })
    .then(response => response.json())
    .then(data => {
        const graphDiv = document.getElementById('star-map');
        Plotly.newPlot(graphDiv, JSON.parse(data.graph).data, JSON.parse(data.graph).layout);

        // 點擊事件：當用戶點擊星星時，觸發獲取星星資訊
        graphDiv.on('plotly_click', function(data) {
            const pointIndex = data.points[0].pointIndex;
            fetch('/star_info', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ pointIndex: pointIndex })
            })
            .then(response => response.json())
            .then(starData => {
                const starInfoDiv = document.getElementById('star-info');
                starInfoDiv.innerHTML = `
                    <h2>Star Information</h2>
                    <p><strong>Name:</strong> ${starData.pl_name}</p>
                    <p><strong>Host Star:</strong> ${starData.hostname}</p>
                    <p><strong>Distance (pc):</strong> ${starData.sy_dist}</p>
                    <p><strong>Discovery Method:</strong> ${starData.discoverymethod}</p>
                    <p><strong>Orbital Period (days):</strong> ${starData.pl_orbper}</p>
                    <p><strong>Stellar Radius (R☉):</strong> ${starData.st_rad}</p>
                `;
            })
            .catch(error => console.error('Error:', error));
        });
    })
    .catch(error => console.error('Error:', error));
});




npm install electron --save-dev



const { app, BrowserWindow } = require('electron')
const path = require('path')

function createWindow () {
    const win = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            preload: path.join(__dirname, 'preload.js'),
            nodeIntegration: true
        }
    })

    win.loadURL('http://127.0.0.1:5000/')
}

app.whenReady().then(() => {
    createWindow()

    app.on('activate', function () {
        if (BrowserWindow.getAllWindows().length === 0) createWindow()
    })
})

app.on('window-all-closed', function () {
    if (process.platform !== 'darwin') app.quit()
})




#electron .



#星等及星星大小
@app.route('/generate_star_map', methods=['POST'])
def generate_star_map():
    lat = float(request.json['lat'])
    lon = float(request.json['lon'])

    # 根據可見光星等 sy_vmag，設置星星的大小
    magnitude = df['sy_vmag']
    
    # 通過正規化星等來控制 marker 的大小，星等越小，星星越亮（marker 越大）
    marker_size = np.clip(20 - magnitude, 1, 20)  # 根據星等調整大小，限制範圍在 1 到 20 之間

    sky_coords = SkyCoord(ra=ra*u.degree, dec=dec*u.degree, distance=distance*u.pc, frame='icrs')

    trace = go.Scattergeo(
        lon=ra,
        lat=dec,
        mode='markers',
        marker=dict(size=marker_size, color='yellow', opacity=0.8),
        hoverinfo='text',
        text=df['pl_name'] + '<br>Magnitude: ' + magnitude.astype(str)
    )

    layout = go.Layout(
        title=f'Star Sky from ({lat}°, {lon}°)',
        geo=dict(
            projection_type='azimuthal equal area',
            showland=True,
            showcoastlines=False,
            bgcolor="black",
            lataxis=dict(range=[-90, 90]),
            lonaxis=dict(range=[-180, 180])
        )
    )

    fig = go.Figure(data=[trace], layout=layout)
    graphJSON = fig.to_json()

    return jsonify({'graph': graphJSON})



document.getElementById('generateBtn').addEventListener('click', function() {
    const lat = document.getElementById('lat').value;
    const lon = document.getElementById('lon').value;

    if (!lat || !lon) {
        alert("Please enter both latitude and longitude.");
        return;
    }

    fetch('/generate_star_map', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ lat: lat, lon: lon })
    })
    .then(response => response.json())
    .then(data => {
        const graphDiv = document.getElementById('star-map');
        Plotly.newPlot(graphDiv, JSON.parse(data.graph).data, JSON.parse(data.graph).layout);

        graphDiv.on('plotly_click', function(data) {
            const pointIndex = data.points[0].pointIndex;
            fetch('/star_info', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ pointIndex: pointIndex })
            })
            .then(response => response.json())
            .then(starData => {
                const starInfoDiv = document.getElementById('star-info');
                starInfoDiv.innerHTML = `
                    <h2>Star Information</h2>
                    <p><strong>Name:</strong> ${starData.pl_name}</p>
                    <p><strong>Host Star:</strong> ${starData.hostname}</p>
                    <p><strong>Distance (pc):</strong> ${starData.sy_dist}</p>
                    <p><strong>Discovery Method:</strong> ${starData.discoverymethod}</p>
                    <p><strong>Orbital Period (days):</strong> ${starData.pl_orbper}</p>
                    <p><strong>Stellar Radius (R☉):</strong> ${starData.st_rad}</p>
                    <p><strong>Magnitude (Vmag):</strong> ${starData.sy_vmag}</p>
                `;
            })
            .catch(error => console.error('Error:', error));
        });
    })
    .catch(error => console.error('Error:', error));
});


